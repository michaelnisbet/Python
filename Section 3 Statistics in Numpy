#CodeAcademy 
#Python 
# Analyze Data with Python


#Introduction to Numpy
#Statistics For Numpy

#Numpy and Mean
import numpy as np

store_one = np.array([2, 5, 8, 3, 4, 10, 15, 5])
store_two = np.array([3, 17, 18,  9,  2, 14, 10])
store_three = np.array([7, 5, 4, 3, 2, 7, 7])

store_one_avg = np.mean(store_one)
print(store_one_avg)
store_two_avg = np.mean(store_two)
print(store_two_avg)
store_three_avg = np.mean(store_three)
print(store_three_avg)

best_seller = store_two

#Mean and Logical Operations
import numpy as np

class_year = np.array([1967, 1949, 2004, 1997, 1953, 1950, 1958, 1974, 1987, 2006, 2013, 1978, 1951, 1998, 1996, 1952, 2005, 2007, 2003, 1955, 1963, 1978, 2001, 2012, 2014, 1948, 1970, 2011, 1962, 1966, 1978, 1988, 2006, 1971, 1994, 1978, 1977, 1960, 2008, 1965, 1990, 2011, 1962, 1995, 2004, 1991, 1952, 2013, 1983, 1955, 1957, 1947, 1994, 1978, 1957, 2016, 1969, 1996, 1958, 1994, 1958, 2008, 1988, 1977, 1991, 1997, 2009, 1976, 1999, 1975, 1949, 1985, 2001, 1952, 1953, 1949, 2015, 2006, 1996, 2015, 2009, 1949, 2004, 2010, 2011, 2001, 1998, 1967, 1994, 1966, 1994, 1986, 1963, 1954, 1963, 1987, 1992, 2008, 1979, 1987])

class_year.sort()
print(class_year)
millennials = np.mean(class_year > 2005)
print(millennials)
print(len(class_year))


#Calculating the Mean of 2D Arrays
import numpy as np

allergy_trials = np.array([[6, 1, 3, 8, 2], 
                           [2, 6, 3, 9, 8], 
                           [5, 2, 6, 9, 9]])


total_mean = np.mean(allergy_trials)
print(total_mean)

trial_mean = np.mean(allergy_trials, axis=1)
print(trial_mean)

patient_mean = np.mean(allergy_trials, axis=0)
print(patient_mean)

#Sorting and Outliers

import numpy as np

temps = np.array([86, 88, 94, 85, 97, 90, 87, 85, 94, 93, 92, 95, 98, 85, 94, 91, 97, 88, 87, 86, 99, 89, 89, 99, 88, 96, 93, 96, 85, 88, 191, 95, 96, 87, 99, 93, 90, 86, 87, 100, 187, 98, 101, 101, 96, 94, 96, 87, 86, 92, 98,94, 98, 90, 99, 96, 99, 86, 97, 98, 86, 90, 86, 94, 91, 88, 196, 195,93, 97, 199, 87, 87, 90, 90, 98, 88, 92, 97, 88, 85, 94, 88, 93, 198, 90, 91, 90, 92, 92])


sorted_temps = np.sort(temps)

print(temps)

print(sorted_temps)

import numpy as np

large_set = np.genfromtxt('household_income.csv', delimiter=',')
large_set2 = np.sort(large_set)
legn = len(large_set)

print(legn)
legn_div_2 = legn/2
print(legn_div_2)
small_set_median2 = (large_set2[100] + large_set2[99])/2
print[small_set_median2]


small_set = np.array([10100, 35500, 105000, 85000, 25500, 40500, 65000])
small_set = np.sort(small_set)
print(small_set)
small_set_median = 40500
#small_set_median = np.median(large_set)

large_set_median = np.median(large_set)
print(large_set_median)
#have to sort the data to than find the two middle values to find the median
print[large_set2[99:101]]


#mean vs median

import numpy as np

time_spent = np.genfromtxt('file.csv', delimiter=',')

print(time_spent)

minutes_mean = np.mean(time_spent)
print(minutes_mean)
minutes_median = np.median(time_spent)
print(minutes_median)

best_measure = minutes_median

#Percentiles, Part 1

import numpy as np

patrons = np.array([ 2, 6, 14, 4, 3, 9, 1, 11, 4, 2, 8])

thirtieth_percentile = np.percentile(patrons, 30)
print(thirtieth_percentile)

seventieth_percentile = np.percentile(patrons, 70)
print(seventieth_percentile)


#Percentiles, Part 1

import numpy as np

patrons = np.array([ 2, 6, 14, 4, 3, 9, 1, 11, 4, 2, 8])

thirtieth_percentile = np.percentile(patrons, 30)
print(thirtieth_percentile)

seventieth_percentile = np.percentile(patrons, 70)
print(seventieth_percentile)

#NumPy and Standard Deviation, Part II
import numpy as np

pumpkin = np.array([68, 1820, 1420, 2062, 704, 1156, 1857, 1755, 2092, 1384])

acorn_squash = np.array([20, 43, 99, 200, 12, 250, 58, 120, 230, 215])

pumpkin_avg = np.mean(pumpkin)

acorn_squash_avg = np.mean(acorn_squash)

pumpkin_std = np.std(pumpkin)

acorn_squash_std = np.std(acorn_squash)

print(pumpkin_std)

print(acorn_squash_std)

winner = pumpkin

#review
import numpy as np

rainfall = np.array([5.21, 3.76, 3.27, 2.35, 1.89, 1.55, 0.65, 1.06, 1.72, 3.35, 4.82, 5.11])

rain_mean = np.mean(rainfall)

rain_median = np.median(rainfall)

first_quarter = np.percentile(rainfall, 25)
third_quarter = np.percentile(rainfall, 75)

interquartile_range = third_quarter - first_quarter

rain_std = np.std(rainfall)

print(rain_mean)
print(rain_median)
print(first_quarter)
print(third_quarter)
print(interquartile_range)

print(rain_std)


#Statistical Distribution with Numpy
# hitograms, Part III
import codecademylib
import numpy as np
# Write matplotlib import here:
from matplotlib import pyplot as plt
commutes = np.genfromtxt('commutes.csv', delimiter=',')

# Plot histogram here:

plt.hist(commutes, range = ( 20 ,51), bins = 6)
plt.show()

#plt.hst(commutes, range =(20 ,51))
#plt.show()

#Normal Distribution, Part II
import codecademylib
import numpy as np
from matplotlib import pyplot as plt

# Brachiosaurus
b_data = np.random.normal ( loc = 6.7 , scale =  0.7, size = 1000)

# Fictionosaurus
f_data = np.random.normal ( loc = 7.7 , scale =  0.3, size = 1000)

plt.hist(b_data,
         bins=30, range=(5, 8.5), histtype='step',
         label='Brachiosaurus')
plt.hist(f_data,
         bins=30, range=(5, 8.5), histtype='step',
         label='Fictionosaurus')
plt.xlabel('Femur Length (ft)')
plt.legend(loc=2)
plt.show()

mystery_dino = 'Brachiosaurus'

answer = False

#standard Deviations and normal distribution, Part II
import numpy as np


one_above = 1100
one_below = 900

print(one_above)
print(one_below)
one_std = .68 * 2000

#Binomial Distributions, Part II
import codecademylib
import numpy as np
from matplotlib import pyplot as plt


emails = np.random.binomial(500, 0.05, size= 10000)
plt.hist(emails)
plt.show()

#Statistical Distribution with Numpy
# hitograms, Part III
import codecademylib
import numpy as np
# Write matplotlib import here:
from matplotlib import pyplot as plt
commutes = np.genfromtxt('commutes.csv', delimiter=',')

# Plot histogram here:

plt.hist(commutes, range = ( 20 ,51), bins = 6)
plt.show()

#plt.hst(commutes, range =(20 ,51))
#plt.show()



#Binomial Distributions and PRobability

import numpy as np

emails = np.random.binomial(500, 0.05, size=10000)



no_emails = np.mean( emails == 0)

print(no_emails)



#Election Results

import codecademylib
import numpy as np
from matplotlib import pyplot as plt
survey_responses = ['Ceballos', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos','Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos', 
'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos', 'Ceballos', 'Ceballos', 'Ceballos',
'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Ceballos',
'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Ceballos']

total_ceballos = sum([1 for n in survey_responses if n == 'Ceballos'])
survey_length = float(len(survey_responses))
print(survey_length)
print(total_ceballos)

percentage_ceballos =  total_ceballos / survey_length 
print(percentage_ceballos)

possible_surveys = np.random.binomial(survey_length, .54, size =10000) / survey_length

plt.hist(possible_surveys, range=(0,1), bins = 20)
plt.show()

# ceballos_loss_surveys = np.mean(possible_surveys < 0.5)
# not the right way to do it even though it is referenced

possible_survey_length = float(len(possible_surveys)) #10000
incorrect_predictions = len(possible_surveys[possible_surveys < .5]) #survey don't predict wrong
ceballos_loss_surveys = incorrect_predictions / possible_survey_length
#print(possible_survey_length)
print(ceballos_loss_surveys)

large_survey_length = float(7000)
large_survey = np.random.binomial(large_survey_length, .54, size =10000)/large_survey_length
plt.hist(large_survey, range=(0,1), bins = 20)
plt.show()

#ceballos_loss__large_surveys = np.mean(large_survey < 0.5)
possible_survey_length = float(len(large_survey)) #10000
incorrect_predictions_large = len(large_survey[large_survey < .5]) #survey don't predict wrong
ceballos_loss_new = incorrect_predictions_large / large_survey_length
print(ceballos_loss_new)



b_test_emails = np.mean( emails == 40)

print(b_test_emails)


import codecademylib
import numpy as np
from matplotlib import pyplot as plt

sunflowers = np.genfromtxt('sunflower_heights.csv',
                           delimiter=',')

# Calculate mean and std of sunflowers here:
sunflowers_mean = np.mean(sunflowers)
sunflowers_std = np.std(sunflowers)

# Calculate sunflowers_normal here:
sunflowers_normal = np.random.normal(
  loc=sunflowers_mean,
  scale=sunflowers_std,
  size=5000
)

'''plt.hist(sunflowers,
         range=(11, 15), histtype='step', linewidth=2,
        label='Observed', normed=True)
plt.hist(sunflowers_normal,
         range=(11, 15), histtype='step', linewidth=2,
        label='Normal', normed=True)
plt.legend()
plt.show()
'''

# Calculate probabilities here:
experiments = np.random.binomial(200, 0.1, size=5000)
prob = np.mean(experiments < 25 )
print(prob)

plt.hist(experiments,
         range=(0, 50), histtype='step', linewidth=2,
        label='Experiments', normed=True)
plt.legend()
plt.show()








